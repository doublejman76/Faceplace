{"ast":null,"code":"import { catchError, tap } from 'rxjs/operators';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { User } from '../shared/user.model';\nimport { AuthUser } from './auth-user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst SIGN_UP_URL = 'https://face-place-api.herokuapp.com/api/v1/users/create';\nconst SIGN_IN_URL = 'https://face-place-api.herokuapp.com/api/v1/users/login';\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.userToken = null;\n      this.currUser = new BehaviorSubject(null);\n    } // Sign Up!\n\n\n    signUp(email, password) {\n      return this.http.post(SIGN_UP_URL, {\n        email: email,\n        password: password\n      });\n    } // Sign In!\n\n\n    signIn(email, password) {\n      return this.http.post(SIGN_IN_URL, {\n        email: email,\n        password: password\n      }).pipe(catchError(this.handleError), tap(responseData => {\n        // Use \"object destructuring\" to get access to all response values\n        const {\n          email,\n          id\n        } = responseData.payload.user;\n        const {\n          expiry,\n          value\n        } = responseData.payload.token;\n        const expiresIn = new Date(expiry).getTime() - Date.now(); // Pass the response values into handleAuth method\n\n        this.handleAuth(email, id, value, expiresIn);\n      }));\n    }\n\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n\n      if (!userData) {\n        return;\n      }\n\n      const loadedUser = new AuthUser(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n\n      if (loadedUser.token) {\n        this.currUser.next(loadedUser);\n        const expirationTime = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n        this.autoLogout(expirationTime);\n      }\n    } // Sign Out!\n\n\n    signOut() {\n      this.currUser.next(null);\n      this.router.navigate(['/auth']);\n      localStorage.removeItem('userData');\n\n      if (this.tokenExpirationTImer) {\n        clearTimeout(this.tokenExpirationTImer);\n      }\n\n      this.tokenExpirationTImer = null;\n    } // Auto Sign In\n\n\n    autoSignIn() {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n      if (!userData) return;\n      const {\n        email,\n        id,\n        _token,\n        _tokenExpirationDate\n      } = userData;\n      const loadedUser = new User(userData.name, userData.email, userData.id, userData.posts, userData.imagePath, userData.bio, userData._token, new Date(_tokenExpirationDate));\n\n      if (this.loadedUser.token) {\n        this.currUser.next(this.loadedUser);\n        const expDur = new Date(_tokenExpirationDate).getTime() - new Date().getTime();\n        this.autoLogout(expDur);\n      }\n    }\n\n    autoLogout(expirationTime) {\n      this.tokenExpirationTImer = setTimeout(() => {\n        this.signOut();\n      }, expirationTime);\n    }\n\n    handleAuth(email, localId, token, expiresIn) {\n      // Create expiration Date for Token\n      const expirationDate = new Date(new Date().getTime() + expiresIn); // Create a new user based on the info passed in and emit that user\n\n      const user = new AuthUser(email, localId, token, expirationDate);\n      this.currUser.next(user); // Set a new timer for expiration token\n\n      this.autoLogout(expiresIn); // Save the new user to localStorage\n\n      localStorage.setItem('userData', JSON.stringify(user));\n    }\n\n    handleError(errorResponse) {\n      let errorMessage = 'An unkown error occurred.';\n\n      if (!errorResponse.error || !errorResponse.error.error) {\n        return throwError(errorMessage);\n      }\n\n      switch (errorResponse.error.error.message) {\n        case 'EMAIL_EXISTS':\n          errorMessage = 'There is already an account associated with this email address. Did you mean to sign in?';\n          break;\n\n        case 'EMAIL_NOT_FOUND':\n          errorMessage = 'There is no account associated with this email address. Did you mean to sign up?';\n          break;\n\n        case 'INVALID_PASSWORD':\n          errorMessage = 'The password you entered was incorrect for this account. Please contact an administrator if you have forgotten your password.';\n          break;\n      }\n\n      return throwError(errorMessage);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();\n\nfunction idToken(email, localId, idToken, arg3) {\n  throw new Error('Function not implemented.');\n}","map":null,"metadata":{},"sourceType":"module"}