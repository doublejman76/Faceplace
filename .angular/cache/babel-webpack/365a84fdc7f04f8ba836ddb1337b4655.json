{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/user.service\";\nexport let PostsService = /*#__PURE__*/(() => {\n  class PostsService {\n    constructor(userService) {\n      this.userService = userService;\n      this.postsSelected = new Subject();\n      this.postListChanged = new Subject(); // Data sources should be IMMUTABLE\n\n      this.myPosts = [];\n    }\n\n    getPosts() {\n      // throw new Error('Method not implemented.');\n      // duplicate of posts\n      return this.myPosts.slice();\n    }\n\n    // READ\n    getPost(idx) {\n      return this.myPosts.slice()[idx];\n    } // CREATE\n\n\n    savePost(post) {\n      this.myPosts.push(post);\n      this.postsSelected.next(post);\n      this.postListChanged.next(this.myPosts.slice());\n    } // UPDATE\n\n\n    updatePost(idx, updatedPostInfo) {\n      this.myPosts[idx] = updatedPostInfo;\n      this.postListChanged.next(this.myPosts.slice());\n    }\n\n    getPostById(id) {\n      return this.myPosts.find(post => post.id === id);\n    } // DELETE\n\n\n    removePost(id) {\n      // We found a post at the index we passed in\n      this.postsSelected.next(this.getPostById(id)); // removing the post\n\n      this.myPosts = this.myPosts.filter(post => post.id != id); // Alert those who are subscribed\n      // Update posts\n\n      this.setPosts(this.myPosts);\n    } // method that alert those who are subscribed\n\n\n    setPosts(posts) {\n      console.log('posts:', posts);\n      this.myPosts = posts || [];\n      this.postListChanged.next(this.myPosts.slice());\n    }\n\n    likePost(post) {\n      this.userService.likePost(post);\n    }\n\n    dislikePost(post) {\n      this.userService.dislikePost(post);\n    }\n\n    onSubmitPost(postName, postText) {\n      console.log('postName', postName);\n      console.log(\"postText\", postText);\n\n      if (postText == '') {\n        return;\n      } else {\n        this.myPosts.push({\n          userName: '',\n          name: postName,\n          content: postText,\n          date: new Date()\n        });\n        this.postListChanged.next(this.myPosts.slice());\n      }\n    }\n\n  }\n\n  PostsService.ɵfac = function PostsService_Factory(t) {\n    return new (t || PostsService)(i0.ɵɵinject(i1.UserService));\n  };\n\n  PostsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostsService,\n    factory: PostsService.ɵfac,\n    providedIn: 'root'\n  });\n  return PostsService;\n})();","map":null,"metadata":{},"sourceType":"module"}